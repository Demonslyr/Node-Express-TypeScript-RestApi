apiVersion: v1
kind: Service
metadata:
  name: node-express-ts-api
  namespace: atriarch-utilities
  labels:
    app: node-express-ts-api
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 3000
  selector:
    app: node-express-ts-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-express-ts-api
  namespace: atriarch-utilities
spec:
  replicas: 1
  selector:
    matchLabels:
      app: node-express-ts-api
  template:
    metadata:
      labels:
        app: node-express-ts-api
    spec:
      containers:
      - image: ${CICD_IMAGE}:v1.0.${CICD_EXECUTION_SEQUENCE}
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            httpHeaders:
            - name: Host
              value: node-express-ts-api.atriarch.systems
            path: /health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
        name: node-express-ts-api
        ports:
        - containerPort: 8080
      imagePullSecrets:
      - name: atriarch-systems-docker-group
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: node-express-ts-api
  namespace: atriarch-utilities
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: node-express-ts-api
  minReplicas: 1
  maxReplicas: 4
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: 60
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: node-express-ts-api
  namespace: atriarch-utilities
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - host: node-express-ts-api.atriarch.systems
    http:
      paths:
      - path: /
        backend:
          serviceName: node-express-ts-api
          servicePort: http
